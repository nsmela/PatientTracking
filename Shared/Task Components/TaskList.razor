<MudToolBar>
    @switch (Editing) {
        <!-- List View: cannot change anything -->
        default:
            <MudPaper MaxHeight="22px" Class="mx-n7 pl-1 d-flex flex-grow-1 justify-space-between">
                <MudText Class="d-inline-flex flex-grow-1 " Typo="Typo.body2" Style="height:18px"><b>@TaskItem.Label</b></MudText>
                <MudText Class="mr-1 d-inline-flex" Typo="Typo.body2" Style="height:18px;">@GetSelectedOption()</MudText>
            </MudPaper>
            break;
        <!-- Data Entry Only: can change the value only -->
        case EditMode.DataEntry:
            <MudToolBar Dense="true">
                <MudText>@TaskItem.Label</MudText>
                <MudSpacer />
                <MudSelect T="string"
                   Variant="Variant.Outlined"
                   Margin="Margin.Dense" Dense="true"
                   ValueChanged="(value) => OnValueChanged(value)"
                   Value="@GetSelectedOption()">
                    @foreach (var option in TaskItem.Options) {
                        <MudSelectItem Value="@option">@option</MudSelectItem>
                    }
                </MudSelect>
            </MudToolBar>
            break;
    }
    <!-- Edit: can edit value and settings -->
    <!-- Maybe use a generic component? -->
</MudToolBar>

@code {
    [Parameter] public PatientTaskList TaskItem { get; set; }
    [Parameter] public EditMode Editing { get; set; }
    [Parameter] public EventCallback<PatientTaskList> GroupChanged { get; set; }

    string GetSelectedOption()=> TaskItem.Options[TaskItem.SelectedOption];
    
    async Task OnValueChanged(string value) {
        TaskItem.SelectedOption = TaskItem.Options.IndexOf(value);
        await GroupChanged.InvokeAsync(TaskItem);
    }
}