@switch(Editing){
    <!-- View Only: cannot change anything -->
    default:
        <MudPaper Class="mud-theme-secondary d-flex flex-nowrap align-content-end flex-grow-1 mt-1" Outlined="true">
            <MudText class="px-2 pt-1 d-inline-flex">@(TaskItem.Label + ":")</MudText>
            <MudPaper Class="mud-theme-secondary d-inline-flex mt-1 px-2 flex-grow-1" Height="18px" Square="true" Elevation="0">
                <MudTextField Typo="Typo.body2" Class="mt-n4" T="string" @bind-Text="TaskItem.Text" ValueChanged="@OnValueChanged" 
                    DisableUnderLine="true" Variant="Variant.Text" Margin="Margin.Dense" />
            </MudPaper>
        </MudPaper>
    break;
    <!-- Data Entry Only: can change the value only -->
    case EditMode.DataEntry:
        <MudTextField T="string" @bind-Text="TaskItem.Text" Variant="Variant.Text" FullWidth="true"
                Adornment="Adornment.Start" AdornmentText="@TaskItem.Label" AdornmentColor="Color.Info" ValueChanged="@OnValueChanged" />
    break;
}
<!-- Edit: can edit value and settings -->
<!-- Maybe use a generic component? -->


@code {
    [Parameter] public PatientTaskText TaskItem { get; set; }
    [Parameter] public EditMode Editing { get; set; }
    [Parameter] public EventCallback<PatientTaskText> GroupChanged { get; set; }

    async Task OnValueChanged(){
        await GroupChanged.InvokeAsync(TaskItem);
    }
}
