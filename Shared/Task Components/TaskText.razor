@switch(Editing){
    <!-- View Only: cannot change anything -->
    default:
            <MudPaper MaxHeight="22px" Class="mx-n7 pl-1 d-flex flex-grow-1 justify-space-between">
                <MudText Class="d-inline-flex flex-grow-1" Typo="Typo.body2" Style="height:18px"><b>@TaskItem.Label</b></MudText>
                <MudCheckBox Class="mt-n4 mr-n2 d-inline-flex" Checked="true" 
                    ReadOnly="true" LabelPosition="LabelPosition.Start" T="bool" Style="height:18px;" />
            </MudPaper>
    break;
    <!-- Data Entry Only: can change the value only -->
    case EditMode.DataEntry:
        <MudTextField T="string" @bind-Text="TaskItem.Text" Variant="Variant.Text" FullWidth="true"
                Adornment="Adornment.Start" AdornmentText="@TaskItem.Label" AdornmentColor="Color.Info" ValueChanged="@OnValueChanged" />
    break;
}
<!-- Edit: can edit value and settings -->
<!-- Maybe use a generic component? -->


@code {
    [Parameter] public PatientTaskText TaskItem { get; set; }
    [Parameter] public EditMode Editing { get; set; }
    [Parameter] public EventCallback<PatientTaskText> GroupChanged { get; set; }

    async Task OnValueChanged(){
        await GroupChanged.InvokeAsync(TaskItem);
    }
}
