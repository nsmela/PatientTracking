@if(patientId is null){
    <MudProgressCircular />

}
else {
    <MudCard Class="pa-n4 ma-2 mud-theme-primary rounded-t-lg" md="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Edit Patient</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.PersonRemove" Color="Color.Error" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudContainer Class="pt-3" MaxWidth="MaxWidth.Large">
            <MudGrid xs="12" md="8">
                <MudItem xs="12" Elevation="0">
                    <MudPaper Elevation="2" Class="pa-2 mt-n8 mud-theme-secondary">
                        <MudTextField @bind-Value="lastName" Label="Last Name" />
                        <MudTextField @bind-Value="firstName" Label="First Name" />
                        <MudTextField @bind-Value="id" Label="Patient ID" />
                        <MudDatePicker @bind-Date="date" Label="Start Date" DisableToolbar="true" />
                    </MudPaper>
                </MudItem>

                @foreach(var group in groups){
                    <MudItem xs="12" md="8">
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudPaper Elevation="2" Class="pa-2">
                                    <MudStack Row="true" Class="d-flex align-content-center pa-0">
                                        <MudTextField @bind-Value="@group.Label" Label="Group Task Label" />
                                        <MudIconButton Icon="@Icons.Material.Filled.RemoveCircleOutline" MaxWidth="64px"
                                               Color="Color.Error" OnClick="(()=> RemoveGroup(group))" />
                                    </MudStack>

                                    @foreach(var result in group.Tasks){
                                        <MudStack Row="true" Class="d-flex align-content-center pa-0">
                                            @if(result.GetType() == typeof(PatientTaskBool)){
                                                <MudTextField @bind-Value="@result.Label" Label="Checkbox Label" />
                                            }
                                            @if(result.GetType() == typeof(PatientTaskText)){
                                                <MudTextField @bind-Value="@result.Label" Label="Text Field Label" />
                                            }
                                            <MudIconButton Icon="@Icons.Material.Filled.RemoveCircle" Color="Color.Error"
                                            MaxWidth="64px" OnClick="(()=> RemoveTask(group, result))"/>
                                        </MudStack>
                                    }
                                    <MudStack Row="true" >
                                        <MudSelect @bind-Value="selectedType[groups.IndexOf(group)]" Label="Task Type" 
                                        AnchorOrigin="Origin.BottomCenter">
                                            <MudSelectItem Value="@("Checkbox")" />
                                            <MudSelectItem Value="@("Text")" />
                                        </MudSelect>
                                        <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Success"
                                            MaxWidth="64px" OnClick="(()=> AddTask(group))"/>
                                    </MudStack>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                }

                <MudItem xs="12">
                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="(()=> AddGroup())">Add Group</MudButton>
                </MudItem>
            </MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="2" Class="pa-2 ma-4 d-flex flex-1">
                    <MudButton Variant="Variant.Filled" Class="ma-2 d-flex flex-1" OnClick="(() => CancelEdit())"
                    Color="Color.Info" Size="Size.Small">Cancel</MudButton>
                    <MudButton Variant="Variant.Filled" Class="ma-2 d-flex flex-1" OnClick="(() => ResetPatient())"
                           Color="Color.Info" Size="Size.Small">Reset</MudButton>
                    <MudButton Variant="Variant.Filled" Class="ma-2 d-flex flex-1" OnClick="(() => SavePatient())"
                    Color="Color.Warning" Size="Size.Small" >Save</MudButton>
                </MudPaper>
            </MudItem>
        </MudContainer>
    </MudCard>
}
@code {
    [Inject] PatientService patientService { get; set; }
    [Inject] NavigationManager navManager { get; set; }

    [Parameter] public string? patientId { get; set; }

    //functions
    string id, lastName, firstName;
    DateTime? date;
    List<PatientTaskGroup> groups = new();
    List<string> selectedType = new();

    private void LoadPatient(Patient? patient){
        if(patient is null) return;
        id = patient.Id;
        lastName = patient.LastName;
        firstName = patient.FirstName;
        date = patient.StartDate;

        groups = new();
        patient.TaskGroups.ForEach(g => {
            PatientTaskGroup group = new PatientTaskGroup { Label = g.Label, Tasks = new() };
            g.Tasks.ForEach(t => {
                if(t.GetType() == typeof(PatientTaskBool)) {
                    var task = t as PatientTaskBool;
                    group.Tasks.Add(new PatientTaskBool { Label = task.Label, Checked = task.Checked });
                }
                if (t.GetType() == typeof(PatientTaskText)) {
                    var task = t as PatientTaskText;
                    group.Tasks.Add(new PatientTaskText { Label = task.Label, Text = task.Text });
                }
            });
            groups.Add(group);
        });

        //used to track which group wants to add which task
        selectedType = new();
        groups.ForEach(g => selectedType.Add(string.Empty));

        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync() {
        if (patientId is null) return;
        var patient = await patientService.GetPatientByIdAsync(patientId);
        LoadPatient(patient);
    }

    private async Task RemoveTask(PatientTaskGroup group, IPatientTask task){
        group.Tasks.Remove(task);
        StateHasChanged();
    }

    private async Task RemoveGroup(PatientTaskGroup group){
        groups.Remove(group);
        selectedType.RemoveAt(0);
        StateHasChanged();
    }


    private async Task AddTask(PatientTaskGroup group){
        if (group is null) return;
        var type = selectedType[groups.IndexOf(group)];
        if (type == "Checkbox") group.Tasks.Add(new PatientTaskBool());
        if (type == "Text") group.Tasks.Add(new PatientTaskText());

        StateHasChanged();
    }

    private async Task AddGroup(){
        groups.Add(new PatientTaskGroup{Tasks = new()});
        selectedType.Add(string.Empty);
        StateHasChanged();
    }

    private async Task CancelEdit(){
        navManager.NavigateTo($"/patient/{patientId}");
    }

    private async Task ResetPatient(){
        var patient = await patientService.GetPatientByIdAsync(patientId);
        LoadPatient(patient);
    }

    private async Task SavePatient(){
        var patient = new Patient {
                Id = id,
                LastName = lastName,
                FirstName = firstName,
                StartDate = date,
                TaskGroups = groups
        };

        await patientService.UpdatePatient(patient);
        navManager.NavigateTo($"/patient/{patientId}");

    }
}
