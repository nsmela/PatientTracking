@inject PatientService patientService
@inject NavigationManager navigationManager

@if(Patient == null){
    <p><em>Loading patient...</em></p>
} 
else{
    <MudCard Class="pb-4 mud-theme-primary rounded-t-lg">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@Date</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" OnClick="(()=> EditPatient())"/>
            </CardHeaderActions>
        </MudCardHeader>
        <MudContainer Class="pt-3" MaxWidth="MaxWidth.Large">
            <MudGrid xs="12">
                <MudItem xs="12" Elevation="0">
                    <MudPaper Elevation="2" Class="pa-2 mt-n8 mud-theme-secondary">
                        <MudText><b>Name:</b> @Name</MudText>
                        <MudText><b>PID:</b> @Id</MudText>
                    </MudPaper>
                </MudItem>
                @foreach (var group in Patient.TaskGroups) {

                    <MudPaper Width="100%" Square="true">
                        <MudContainer Class="ma-0 pa-0 mud-theme-secondary">
                            <MudText Class="pl-2" Align="Align.Left" Typo="Typo.h6">@group.Label</MudText>
                        </MudContainer>
                        @foreach (var result in group.Tasks) {
                            <PatientTask TaskItem="@result"/>
                        }
                    </MudPaper>

                }
            </MudGrid>
        </MudContainer>
    </MudCard>
}

@code {
    [Parameter]
    public Patient? Patient { get; set; }
    string Name => Patient.LastName + ", " + Patient.FirstName;
    string Id => Patient.Id;
    string Date => $" {Patient.StartDate.Value.Year} {months[Patient.StartDate.Value.Month]} {Patient.StartDate.Value.Day.ToString("00")}";
    int status => (int)Patient.Status;
    string[] months = new string[] { "N/A", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"};
    string[] labels = new string[] { "Newly Added", "Assigned", "Treatment Ready", "In Treatment", "Treatment Complete", "Retired" };

    private async Task UpdatePatientTask(string groupLabel, string label, object value){
        int groupIndex = Patient.TaskGroups.FindIndex(g => g.Label == groupLabel);
        int index = Patient.TaskGroups[groupIndex].Tasks.FindIndex(t => t.Label == label);
        if (index >= 0) {
            Patient.TaskGroups[groupIndex].Tasks[index].SetValue(value);
            patientService.UpdatePatient(Patient);
        }
    }

    private void EditPatient(){
        navigationManager.NavigateTo($"patient/{Patient.Id}");
    }
}
