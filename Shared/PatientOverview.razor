

@if(Patient == null){
    <p><em>Loading patient...</em></p>
} 
else{
    <MudPaper Class="mud-theme-primary pa-1 mb-2 ma-1" Width="360px">
        <!-- Header -->
        <MudExpansionPanel Class="mud-theme-primary" Dense="true" DisableGutters="true">
            <TitleContent>
                <MudToolBar Dense=true DisableGutters=true>
                    <MudText>@Name.ToUpper()</MudText>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Preview" Size="Size.Small" OnClick="@(() => EditPatient())" />
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" >
                        <MudMenuItem Icon="@Icons.Material.Filled.ModeEdit" OnClick="@(() => ModifyPatient())">Edit Tasks</MudMenuItem>
                        <MudMenuItem Icon="@Icons.Material.Filled.Archive">Archive Patient</MudMenuItem>
                        <MudMenuItem Icon="@Icons.Material.Filled.RemoveCircleOutline">Remove Patient</MudMenuItem>
                    </MudMenu>
                </MudToolBar>
            </TitleContent>
            <ChildContent>
                <MudPaper Class="mud-theme-primary ma-n1 pl-1" Square="true" Elevation="0" Outlined="true">
                    <MudText ><b>Patient ID:</b> @Patient.Id</MudText>
                    <MudText ><b>Start Date: </b>@Patient.StartDate.Value.ToLongDateString()</MudText>
                </MudPaper>
            </ChildContent>
        </MudExpansionPanel>
        
        @foreach (var group in Patient.TaskGroups) {
            <!-- Task Group -->
            <MudGrid Class="mud-theme-tertiary pa-1 mt-2 d-flex flex-column" Spacing="1" >
                <MudItem>
                    <MudText>@group.Label</MudText>
                </MudItem>
                @foreach (var result in group.Tasks) {
                    <MudPaper MaxHeight="22px" Class="mud-theme-secondary mx-1 pl-1 mt-1 d-flex flex-grow-1 justify-space-between">
                        <MudText Class="d-inline-flex flex-grow-1" Typo="Typo.body2" Style="height:18px"><b>@result.Label</b></MudText>
                        @if (result.Type == typeof(bool)) {
                            var task = result as PatientTaskBool;
                            <MudCheckBox Class="mt-n4 mr-n2 d-inline-flex" Checked="@task.Checked" ReadOnly="true" LabelPosition="LabelPosition.Start" T="bool" Style="height:18px;" />
                        }
                        else {
                            <MudText Class="mr-1 d-inline-flex" Typo="Typo.body2" Style="height:18px;">@result.ToString()</MudText>
                        }
                        
                    </MudPaper>
                }
            </MudGrid>
        }
    </MudPaper>
}

@code {
    [Inject] private PatientService patientService { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }

    [Parameter] public Patient? Patient { get; set; }
    string Name => Patient.LastName + ", " + Patient.FirstName;

    private async Task UpdatePatientTask(string groupLabel, string label, object value){
        int groupIndex = Patient.TaskGroups.FindIndex(g => g.Label == groupLabel);
        int index = Patient.TaskGroups[groupIndex].Tasks.FindIndex(t => t.Label == label);
        if (index >= 0) {
            Patient.TaskGroups[groupIndex].Tasks[index].SetValue(value);
            patientService.UpdatePatient(Patient);
        }
    }

    private void EditPatient() => navigationManager.NavigateTo($"patient/{Patient.Id}");
    private async Task ModifyPatient() => navigationManager.NavigateTo($"editpatient/{Patient.Id}");

}
