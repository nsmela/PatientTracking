
<MudPaper Class="mud-theme-primary" MinHeight="180px">
    <MudText Typo="Typo.h2">@(patient.LastName.ToUpper() + ", " + patient.FirstName.ToUpper())</MudText>
    <MudText Typo="Typo.h3">DUE: @patient.StartDate.Value.ToLongDateString()</MudText>
    <MudText Typo="Typo.h3">PHYSICIAN: N/A</MudText>
</MudPaper>

@code {
    [Inject] private IDialogService dialogService { get; set; }
    [Inject] private PatientService patientService { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }

    [Parameter] public string PatientId { get; set; }

    Patient? patient = null;

    protected override async Task OnParametersSetAsync() {
        patient = await patientService.GetPatientByIdAsync(PatientId);
    }

    private async Task UpdatePatientTask(string groupLabel, string label, object value) {
        int groupIndex = patient.TaskGroups.FindIndex(g => g.Label == groupLabel);
        int index = patient.TaskGroups[groupIndex].Tasks.FindIndex(t => t.Label == label);
        if (index >= 0) {
            patient.TaskGroups[groupIndex].Tasks[index].SetValue(value);
            patientService.UpdatePatient(patient);
        }
    }

    private async Task DeletePatient() {
        var result = await dialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", 
            cancelText: "Cancel");

        if (result is null) return;

        patientService.RemovePatient(PatientId);
        navigationManager.NavigateTo("/patients");
    }

    private async Task EditPatient(){
        navigationManager.NavigateTo($"/editpatient/{PatientId}");
    }
}
