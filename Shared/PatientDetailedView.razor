@inject PatientService patientService
@inject NavigationManager navigationManager

@if(patient is null){
    <MudProgressCircular />
} else {
    <MudContainer Class="ma-4 pa-2" >
        <MudGrid xs="12" md="8" lg="4">
            <MudItem xs="12" md="8" Elevation="1">
                <MudCard Class="pa-n4 mt-0 mud-theme-primary py-4 px-4 rounded-t-lg">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@patient.StartDate</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.EditNote" Color="Color.Default" OnClick="(() => EditPatient())" />
                            <MudIconButton Icon="@Icons.Material.Filled.PersonRemove" Color="Color.Default" OnClick="(()=> DeletePatient())"/>
                        </CardHeaderActions>
                    </MudCardHeader>
                </MudCard>
                <MudPaper Elevation="2" Class="pa-4 mt-n8">
                    <MudText>@patient.LastName, @patient.FirstName</MudText>
                    <MudText>@patient.Id</MudText>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="8">
                <MudGrid>
                    @foreach (var group in patient.TaskGroups) {
                        <MudItem xs="12" md="8">
                            <MudPaper Elevation="2" Class="pa-4">
                                <MudText Typo="Typo.h6">@group.Label</MudText>
                                    @foreach(var result in group.Tasks){
                                        if (result.GetType() == typeof(PatientTaskBool)) {
                                            var task = result as PatientTaskBool;
                                            <MudCheckBox T="bool"
                                            LabelPosition="LabelPosition.Start"
                                            Label="@task.Label"
                                            Checked="@task.Checked"
                                            CheckedChanged="(value) => UpdatePatientTask(group.Label, task.Label, (bool)value)" />
                                        }
                                        else if (result.GetType() == typeof(PatientTaskText)) {
                                            var task = result as PatientTaskText;
                                            <MudTextField T="string"
                                            Label="@task.Label"
                                            Variant="Variant.Outlined"
                                            Margin="Margin.Dense"
                                            TextChanged="(value) => UpdatePatientTask(group.Label, task.Label, (string)value)"
                                            Text="@task.Text" />
                                        }
                                        else if (result.GetType() == typeof(PatientTaskDate)) {
                                            var task = result as PatientTaskDate;
                                            <MudDatePicker T="DateTime"
                                              Label="@task.Label"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              DateChanged="(value) => UpdatePatientTask(group.Label, task.Label, (DateTime)value)"
                                              Date="@task.Date" />
                                        }
                                        else if (result.GetType() == typeof(PatientTaskNumber)) {
                                            var task = result as PatientTaskNumber;
                                            <MudNumericField T="double" 
                                               HideSpinButtons="true"
                                               Format="F4"
                                               Label="@task.Label"
                                               Variant="Variant.Outlined"
                                               Margin="Margin.Dense"
                                               ValueChanged="(value) => UpdatePatientTask(group.Label, task.Label, (double)value)"
                                               Value="@task.Value" />
                                        }
                                        else if (result.GetType() == typeof(PatientTaskList)) {
                                            var task = result as PatientTaskList;
                                            <MudToolBar Dense="true">
                                                <MudText>@task.Label</MudText>
                                                <MudSpacer />
                                                <MudSelect T="int"
                                                   Variant="Variant.Outlined"
                                                   Margin="Margin.Dense" Dense="true"
                                                   ValueChanged="(value) => UpdatePatientTask(group.Label, task.Label, (int)value)"
                                                   Value="@task.SelectedOption">
                                                    @foreach (var option in task.Options) {
                                                        <MudSelectItem Value="@(task.Options.IndexOf(option))">@option</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudToolBar>
                                        }
                                    }
                                </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    [Inject] private IDialogService dialogService { get; set; }

    [Parameter] public string PatientId { get; set; }

    Patient? patient = null;

    protected override async Task OnParametersSetAsync() {
        patient = await patientService.GetPatientByIdAsync(PatientId);
    }

    private async Task UpdatePatientTask(string groupLabel, string label, object value) {
        int groupIndex = patient.TaskGroups.FindIndex(g => g.Label == groupLabel);
        int index = patient.TaskGroups[groupIndex].Tasks.FindIndex(t => t.Label == label);
        if (index >= 0) {
            patient.TaskGroups[groupIndex].Tasks[index].SetValue(value);
            patientService.UpdatePatient(patient);
        }
    }

    private async Task DeletePatient() {
        var result = await dialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", 
            cancelText: "Cancel");

        if (result is null) return;

        patientService.RemovePatient(PatientId);
        navigationManager.NavigateTo("/patients");
    }

    private async Task EditPatient(){
        navigationManager.NavigateTo($"/editpatient/{PatientId}");
    }
}
