<MudPaper Class="mud-theme-primary pa-2 ml-2 mt-1 rounded-t-xl rounded-0" MinHeight="240px">
    <MudItem Class="d-flex justify-content-between">
        <MudItem>
            <MudText Typo="Typo.h2">@(patient.LastName.ToUpper() + ", " + patient.FirstName.ToUpper())</MudText>
            <MudText Typo="Typo.h3">DUE: @patient.StartDate.Value.ToLongDateString()</MudText>
            <MudText Typo="Typo.h3">PHYSICIAN: N/A</MudText>
        </MudItem>
        <MudItem Style="transform:rotateZ(270deg);height:200px;" Class="d-flex flex-column justify-content-end mr-10">
            <MudButton Variant="Variant.Outlined">History</MudButton>
            <MudButton Variant="Variant.Outlined">Compare</MudButton>
        </MudItem>
    </MudItem>

</MudPaper>

<MudContainer Class="mt-n12 ml-6 d-flex flex-row" > 
    @foreach (var group in patient.TaskGroups) {
        <MudPaper Class="d-flex ma-2 pa-2 flex-column" Elevation="2" >
            <MudText class="d-flex" Typo="Typo.h6">@group.Label</MudText>
            @foreach (var task in group.Tasks) {
                <!--<PatientTask TaskItem="@task" Edit="EditMode.DataEntry" />-->
                @switch(task.Type){
                    case typeof(bool):
                        <MudPaper Class="d-flex justify-content-between mt-1" Outlined="true" MinWidth="360px">
                            <MudText Class="d-inline-flex align-self-center pl-2">Task Item</MudText>
                            <MudCheckBox T="bool"/>
                        </MudPaper>
                        break;
                }


            }
        </MudPaper>
    }

</MudContainer>



@code {
    [Inject] private IDialogService dialogService { get; set; }
    [Inject] private PatientService patientService { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; }

    [Parameter] public string PatientId { get; set; }

    Patient? patient = null;

    protected override async Task OnParametersSetAsync() {
        patient = await patientService.GetPatientByIdAsync(PatientId);
    }

    private async Task UpdatePatientTask(string groupLabel, string label, object value) {
        int groupIndex = patient.TaskGroups.FindIndex(g => g.Label == groupLabel);
        int index = patient.TaskGroups[groupIndex].Tasks.FindIndex(t => t.Label == label);
        if (index >= 0) {
            patient.TaskGroups[groupIndex].Tasks[index].SetValue(value);
            patientService.UpdatePatient(patient);
        }
    }

    private async Task DeletePatient() {
        var result = await dialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", 
            cancelText: "Cancel");

        if (result is null) return;

        patientService.RemovePatient(PatientId);
        navigationManager.NavigateTo("/patients");
    }

    private async Task EditPatient(){
        navigationManager.NavigateTo($"/editpatient/{PatientId}");
    }
    
}
