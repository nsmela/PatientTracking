<MudPaper Width="560px" Class="ma-2" Outlined="true" Style="@($"background:{Colors.BlueGrey.Darken4};")">
    <MudToolBar DisableGutters="true">
        <MudText Typo="Typo.h4" Class="pl-1">@newTemplate.Label</MudText>
        <MudSpacer />
        <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight"
                TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
            <MudButton Size="Size.Small" Color="Color.Success" StartIcon="@Icons.Material.Filled.PersonAddAlt1">Create Patient</MudButton>
            <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit" OnClick=@EditTemplate >
                @(editMode ? "Cancel Edit" : "Edit Template" )
            </MudButton>
            <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.RemoveCircle" OnClick=@RemoveTemplate >Remove Template</MudButton>
        </MudMenu>
    </MudToolBar>
    <!-- Groups -->
    @foreach (var group in newTemplate.Groups){
        <TemplateGroupItem Editing=@editMode Group=@group PatientTemplate=@newTemplate TemplateChanged=@OnTemplateUpdated />
    }

    @if (editMode) {
        <MudStack Rows="true" Spacing="1">
            @if(newGroupOpen){
                <MudPaper Outlined="true" Class="ma-1 pa-1" >
                    <MudTextField @bind-Value="newGroupLabel" Placeholder="New Group" DisableUnderLine="true" />
                    <MudButton FullWidth="true" OnClick=@SubmitNewGroup> Add Task </MudButton>
                </MudPaper>
            }else {
                <MudButton OnClick=@(()=> newGroupOpen = true)> New Group </MudButton>
            }
            <MudButton OnClick=@ResetTemplate> Reset </MudButton>
        <MudButton  OnClick=@SaveTemplate> Save </MudButton>
        </MudStack>
    }
</MudPaper>

@code {
    [Parameter] public TemplateItem PatientTemplate { get; set; }
    [Parameter] public TemplateItem[] Templates { get; set; }
    [Parameter] public EventCallback<TemplateItem> TemplateChanged {get; set;}

    TemplateItem newTemplate = null;
    bool editMode = false;
    bool newGroupOpen = false;
    string newGroupLabel = string.Empty;

    protected override async Task OnParametersSetAsync() {
        newTemplate = PatientTemplate.Copy();
    }

    async Task SubmitNewGroup(){
        var group = new TaskGroup { Label = newGroupLabel, Tasks = new() };
        newTemplate.Groups.Add(group);

        newGroupOpen = false;
        newGroupLabel = string.Empty;
    }

    async Task EditTemplate(){
        editMode = !editMode;
    }

    async Task ResetTemplate(){
        newTemplate = PatientTemplate.Copy();
        StateHasChanged();
    }

    async Task RemoveTemplate(){
        PatientTemplate.Status = TemplateStatus.Delete; //used to signify the template needs to be deleted
        await TemplateChanged.InvokeAsync(PatientTemplate);
        return;

        int index = Array.IndexOf(Templates, PatientTemplate);
        var newArray = new List<TemplateItem>();

        foreach (var template in Templates) if (template != PatientTemplate) newArray.Add(template);

        Templates = newArray.ToArray();
        await TemplateChanged.InvokeAsync(PatientTemplate);
    }

    async Task SaveTemplate(){
        PatientTemplate = newTemplate;
        await TemplateChanged.InvokeAsync(newTemplate);
        editMode = false;
    }

    async Task OnTemplateUpdated(TemplateItem template){
        newTemplate = template;
    }
}
