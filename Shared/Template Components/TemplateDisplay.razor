<MudPaper Width="560px" Class="ma-2" Outlined="true" Style="@($"background:{Colors.BlueGrey.Darken4};")">
    <MudToolBar DisableGutters="true">

        @if (editMode) {
            if (nameEditMode)
            {
                <MudTextField @bind-Value="newTemplate.Label" Placeholder="@newTemplate.Label" Class="pa-2 mb-2 mt-2"
                    Typo="Typo.h5" Variant="Variant.Filled" Immediate="false" TextChanged=@SubmitTemplateNameEdit />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Rounded.Edit" Size="Size.Small" OnClick=@SubmitTemplateNameEdit />
            }else {
                <MudText Typo="Typo.h4" Class="pl-1">@newTemplate.Label</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Rounded.Edit" Size="Size.Small" OnClick="(()=> nameEditMode=true)" />
            }
        }else {
            <MudText Typo="Typo.h4" Class="pl-1">@newTemplate.Label</MudText>
            <MudSpacer />
        }
        <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight"
                TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
            <MudButton Size="Size.Small" Color="Color.Success" StartIcon="@Icons.Material.Filled.PersonAddAlt1">Create Patient</MudButton>
            <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit" OnClick=@EditTemplate >
                @(editMode ? "Cancel Edit" : "Edit Template" )
            </MudButton>
            <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.RemoveCircle" OnClick=@RemoveTemplate >Remove Template</MudButton>
        </MudMenu>
    </MudToolBar>

    <!-- Groups -->
    @for(int i = 0; i < newTemplate.Groups.Count(); i++){
        var group = newTemplate.Groups[i];
        bool edit = (editMode && newTemplate.EditableGroupIndex == i);
        <TemplateGroupItem Edit=@editMode Group=@group PatientTemplate=@newTemplate TemplateChanged=@OnTemplateUpdated />
    }

    <!-- Template Controls -->
    @if (editMode) {
        <MudStack Rows="true" Spacing="1">
            @if(newGroupOpen){
                <MudPaper Outlined="true" Class="ma-1 pa-1" >
                    <MudToolBar>
                        <MudAutocomplete T="string" Label="New Group Name" @bind-Value="newGroupLabel" CoerceText="true" CoerceValue="true"
                                 ResetValueOnEmptyText="true" SearchFunc="@SearchGroupNames" />
                        <MudSpacer/>
                        <MudButton OnClick=@SubmitNewGroup> Add </MudButton>
                        <MudButton OnClick="(()=> { newGroupOpen = false; newGroupLabel = string.Empty;})"> Cancel </MudButton>
                    </MudToolBar>
                </MudPaper>
            }else {
                <MudButton OnClick=@(()=> newGroupOpen = true)> New Group </MudButton>
            }
            <MudButton OnClick=@ResetTemplate> Reset </MudButton>
        <MudButton  OnClick=@SaveTemplate> Save </MudButton>
        </MudStack>
    }
</MudPaper>

@code {
    [Parameter] public TemplateItem PatientTemplate { get; set; }
    [Parameter] public TemplateItem[] Templates { get; set; }
    [Parameter] public EventCallback<TemplateItem> TemplateChanged {get; set;}
    [Parameter] public TaskGroup[] GroupTemplates { get; set; }

    TemplateItem newTemplate = null;
    string[] groupTemplates = new string[0];
    bool editMode = false;
    bool nameEditMode = false;
    bool initalNameEdit = false;
    bool newGroupOpen = false;
    string newGroupLabel = string.Empty;
    string groupSelected = "Custom";

    protected override async Task OnParametersSetAsync() {
        newTemplate = PatientTemplate.Copy();

        var groups = new List<string>();
        Array.ForEach(GroupTemplates, g => groups.Add(g.Label));
        groupTemplates = groups.ToArray();

        //if the group has a valid id number
        //copy the original linked template
        for(int i = 0; i < newTemplate.Groups.Count(); i++){
            if (newTemplate.Groups[i].Id > -1) {
                //get the relevant group
                //copy that group
                //add it to the template
                var template = GroupTemplates.First(x => x.Id == newTemplate.Groups[i].Id);
                var group = template.Copy();
                newTemplate.Groups[i] = group;
            }
        }
    }

    async Task<IEnumerable<string>> SearchGroupNames(string value){
        if (string.IsNullOrEmpty(value)) return groupTemplates;

        var result = groupTemplates.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        return result;
    }

    async Task SubmitNewGroup(){
        //is the entry invalid?
        if (string.IsNullOrWhiteSpace(newGroupLabel)) return;
        var group = new TaskGroup(newGroupLabel, new List<TaskItem>(), null);
        if(groupTemplates.Contains(newGroupLabel)){
            int index = -1;
            for (int i = 0; i < GroupTemplates.Count(); i++) {
                if (GroupTemplates[i].Label == newGroupLabel) {
                    index = i;
                } 
            }

            if(index >= 0){
                group = GroupTemplates[index].Copy();
            }
        }

        foreach(var g in newTemplate.Groups){
            if (g.Id == group.Id) return; //already added
        }

        newTemplate.Groups.Add(group);

        newGroupOpen = false;
        newGroupLabel = string.Empty;
    }

    async Task EditTemplate(){
        editMode = !editMode;

        if (!editMode) ResetTemplate();
    }

    async Task ResetTemplate(){
        newTemplate = PatientTemplate.Copy();
        nameEditMode = false;
        newGroupOpen = false;
        newGroupLabel = string.Empty;
        StateHasChanged();
    }

    async Task SubmitTemplateNameEdit() {
        //start of text changed triggers this before any edits are made
        //this boolean prevents closing the text field immediately
        if(!initalNameEdit){
            initalNameEdit = true;
            return;
        }

        initalNameEdit = false;
        nameEditMode = false;

    }

    async Task RemoveTemplate(){
        PatientTemplate.Status = TemplateStatus.Delete; //used to signify the template needs to be deleted
        await TemplateChanged.InvokeAsync(PatientTemplate);
        return;

        int index = Array.IndexOf(Templates, PatientTemplate);
        var newArray = new List<TemplateItem>();

        foreach (var template in Templates) if (template != PatientTemplate) newArray.Add(template);

        Templates = newArray.ToArray();
        await TemplateChanged.InvokeAsync(PatientTemplate);
    }

    async Task SaveTemplate(){
        PatientTemplate = newTemplate;
        await TemplateChanged.InvokeAsync(newTemplate);
        editMode = false;
    }

    async Task OnTemplateUpdated(TemplateItem template){
        newTemplate = template;
    }
}
