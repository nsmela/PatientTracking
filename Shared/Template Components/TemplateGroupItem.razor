<MudPaper Class="ma-2 pb-2" Style="@($"background:{Colors.BlueGrey.Darken1};")">
    @if(Editing){
        @if (PatientTemplate.EditableGroupIndex == PatientTemplate.Groups.IndexOf(Group)) {
            <MudToolBar DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken2};")">
            <MudTextField @bind-Value="Group.Label" Placeholder="@Group.Label"  Class="pa-2 mb-2 mt-2"
                        Typo="Typo.h5" Variant="Variant.Filled" Immediate="false" TextChanged=@SubmitGroupNameEdit />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Rounded.Edit" Size="Size.Small" OnClick=@SubmitGroupNameEdit  />
            </MudToolBar>
        }else{
            <MudToolBar DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken2};")">
                <MudText Typo="Typo.h5" Class="pl-2">@Group.Label</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small" OnClick="(() => IncrementGroup())" />
                <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Size="Size.Small" OnClick="(() => DecrementGroup())"  />
                <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight"
                    ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                    <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit" OnClick=@OpenNameEditing >Rename Section</MudButton>
                    <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.RemoveCircle" OnClick=@RemoveGroup >Remove Group</MudButton>
                </MudMenu>
            </MudToolBar>
        }
    }else {
        <MudToolBar DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken2};")">
            <MudText Typo="Typo.h5" Class="pl-2">@Group.Label</MudText>
        </MudToolBar>
    }

    <!-- Tasks -->
    @foreach (var task in Group.Tasks) {
        <TemplateTaskItem Group="@Group" Task="@task" GroupChanged="@OnGroupUpdated" Editing="@Editing" />
    }
    @if(Editing){
        if(newTaskOpen){
        <MudPaper Outlined="true" Class="ma-1 pa-1" >
            <MudTextField @bind-Value="newTaskLabel" Placeholder="New Task" DisableUnderLine="true" />
            <MudButton FullWidth="true" OnClick=@SubmitNewTask> Add Task </MudButton>
        </MudPaper>
        }else {
            <MudButton FullWidth="true" OnClick="(() => newTaskOpen = true)"> New Task </MudButton>
        }
    }

</MudPaper>


@code {
    [Parameter] public TaskGroup Group { get; set; }
    [Parameter] public TemplateItem PatientTemplate { get; set; }
    [Parameter] public bool Editing { get; set; } = false;
    [Parameter] public EventCallback<TemplateItem> TemplateChanged { get; set; } 

    bool editMode = false;
    bool newTaskOpen = false;

    string newTaskLabel = string.Empty;

    //functions
    async Task IncrementGroup(){
        int index = PatientTemplate.Groups.IndexOf(Group);
        if (index <= 0) return;

        PatientTemplate.Groups.Remove(Group);
        PatientTemplate.Groups.Insert(index - 1, Group);

        await TemplateChanged.InvokeAsync(PatientTemplate);
    }

    async Task DecrementGroup(){
        int index = PatientTemplate.Groups.IndexOf(Group);
        if (index >= PatientTemplate.Groups.Count() - 1) return;

        PatientTemplate.Groups.Remove(Group);
        PatientTemplate.Groups.Insert(index + 1, Group);

        await TemplateChanged.InvokeAsync(PatientTemplate);
    }

    async Task OpenNameEditing(){
        int index = PatientTemplate.Groups.IndexOf(Group);

        PatientTemplate.EditableGroupIndex = index;
        editMode = false;
    }

    async Task SubmitGroupNameEdit(){
        if(!editMode){ editMode = true; return; } //to offset the first time TextvalueChanged is triggered

        //all changes are automaticaly bound to Group.Label, so we only need to close the textfield and submit

        editMode = false;
        PatientTemplate.EditableGroupIndex = -1;
        await TemplateChanged.InvokeAsync(PatientTemplate);
    }

    async Task RemoveGroup(){
        PatientTemplate.Groups.Remove(Group);        
        await TemplateChanged.InvokeAsync(PatientTemplate);
    }

    async Task SubmitNewTask(){
        Group.Tasks.Add( new TaskItem { Label = newTaskLabel });

        newTaskOpen = false;
        newTaskLabel = string.Empty;

        await TemplateChanged.InvokeAsync(PatientTemplate);
    }

    //callbacks
    private async Task OnGroupUpdated(TaskGroup group){
            foreach(var tGroup in PatientTemplate.Groups){
                if(tGroup == group){
                    int groupIndex = PatientTemplate.Groups.IndexOf(tGroup);
                    PatientTemplate.Groups[groupIndex] = group;
                    await TemplateChanged.InvokeAsync(PatientTemplate);
                    return;
                }
            }
        
    }
}
