@{
    <!-- Icons -->
    var icon = Icons.Material.Filled.QuestionMark;
    if (Task.Type == typeof(bool)) icon = Icons.Material.Filled.CheckBox;
    if (Task.Type == typeof(string)) icon = Icons.Material.Filled.TextSnippet;
    if (Task.Type == typeof(List<string>)) icon = Icons.Material.Filled.List;
    if (Task.Type == typeof(DateTime)) icon = Icons.Material.Filled.CalendarMonth;
    if (Task.Type == typeof(double)) icon = Icons.Material.Filled.Numbers;
    <!-- if (Task.Type == typeof(MathFormula)) icon = Icons.Material.Filled.Calculate;  -->
}

@if (!Editing) {
        <MudToolBar Class="pa-2 ma-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
            <MudIcon Icon="@icon" Size="Size.Small" />
            <MudText Typo="Typo.body1" Class="pl-2">@Task.Label</MudText>
        </MudToolBar>
}
else {
    @if (Group.EditableTaskIndex == Group.Tasks.IndexOf(Task)) {
        <MudToolBar Row="true" Class="pa-2 ma-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
            <MudIcon Icon="@icon" Size="Size.Small" />
            <MudInput @bind-Value="Task.Label" Placeholder="@Task.Label" Margin="Margin.Normal" Class="mb-n2 mt-n2 pr-8n pl-1 pt-1"
            Variant="Variant.Filled" Immediate="false" TextChanged=@(()=> SubmitTaskEdit()) FullWidth="true"/>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Rounded.Edit" Size="Size.Small" OnClick=@(()=> SubmitTaskEdit()) />
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small" Class="pl-4 invisible" />
        </MudToolBar>
    }
    else {
        <MudToolBar Class="pa-2 ma-1" DisableGutters="true" Style="@($"background:{Colors.BlueGrey.Darken3};")">
            <MudMenu Dense="true">
                <ActivatorContent>
                    <MudChip Icon="@icon" Size="Size.Small" Color="Color.Primary"/>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Icon="@Icons.Material.Filled.CheckBox" Size="Size.Small" OnClick="@(()=> SelectType(0))">Checkbox</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.TextSnippet" Size="Size.Small" OnClick="@(()=> SelectType(1))">Text</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.List" Size="Size.Small" OnClick="@(()=> SelectType(2))">Dropbox</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Small" OnClick="@(()=> SelectType(3))">Date</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.Numbers" Size="Size.Small" OnClick="@(()=> SelectType(4))">Number</MudMenuItem>
                </ChildContent>
            </MudMenu>
            <MudText Typo="Typo.body1" Class="pl-2">@Task.Label</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small" OnClick="(() => IncrementTask())" />
            <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Size="Size.Small" OnClick="(() => DecrementTask())" />
            <MudIconButton Icon="@Icons.Material.Rounded.Edit" Size="Size.Small" OnClick="@(()=> EditTask())" />
            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.RemoveCircle" Size="Size.Small" Class="pl-4" OnClick="(() => RemoveTask())" />
        </MudToolBar>
    }
}

@code {
    [Parameter] public TaskGroup Group { get; set; }
    [Parameter] public TaskItem Task { get; set; }
    [Parameter] public bool Editing { get; set; } = false;
    [Parameter] public EventCallback<TaskGroup> GroupChanged { get; set; }

    bool editMode = false; //used to prevent the text field from exiting immediately when using TextChanged event handler

    #region Button Functions

    async Task IncrementTask() {
        int index = Group.Tasks.IndexOf(Task);
        if (index <= 0) return;

        Group.Tasks.Remove(Task);
        Group.Tasks.Insert(index - 1, Task);

        Group.EditableTaskIndex = -1;

        await GroupChanged.InvokeAsync(Group);
    }

    async Task DecrementTask() {
        int index = Group.Tasks.IndexOf(Task);
        if (index >= Group.Tasks.Count() - 1) return; //already at bottom

        Group.Tasks.Remove(Task);
        Group.Tasks.Insert(index + 1, Task);

        Group.EditableTaskIndex = -1;

        await GroupChanged.InvokeAsync(Group);
    }

    async Task RemoveTask() {
        Group.Tasks.Remove(Task);
        await GroupChanged.InvokeAsync(Group);
    }

    async Task EditTask() {
        int index = Group.Tasks.IndexOf(Task);
        Group.EditableTaskIndex = index;

        await GroupChanged.InvokeAsync(Group);
    }

    async Task SubmitTaskEdit() {
        if (!editMode) { editMode = true; return; }

        editMode = false;

        Group.EditableTaskIndex = -1;
        await GroupChanged.InvokeAsync(Group);
    }

    async Task SelectType(int index){
        if (index == 0) Task.Type = typeof(bool);
        if (index == 1) Task.Type = typeof(string);
        if (index == 2) Task.Type = typeof(List<string>);
        if (index == 3) Task.Type = typeof(DateTime?);
        if (index == 4) Task.Type = typeof(double);

        await GroupChanged.InvokeAsync(Group);
    }

    #endregion

}
