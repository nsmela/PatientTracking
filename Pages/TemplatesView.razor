@page "/templates"

<MudContainer Class="pa-1 align-items-baseline">
    <MudPaper MaxHeight="64px" MaxWidth="660px" Class="pa-2 ma-2">
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Success" IconSize="Size.Small" StartIcon="@Icons.Material.Filled.Add" OnClick="@(()=> newTemplateOpen = true)">Add Template </MudButton>
            <MudTextField Class="align-self-center" T="string" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" />
        </MudStack>
    </MudPaper>
    <!-- Templates -->
    <MudStack Row=@true >
        <!-- New Template -->
        @if(newTemplateOpen){
            <MudPaper Width="560px" Class="ma-2" Outlined="true" Style="@($"background:{Colors.BlueGrey.Darken4};")" >
                <MudTextField @bind-Value="newTemplateLabel" Placeholder="New Template" DisableUnderLine="true" />
                <MudButton OnClick="AddTemplate" >Add Template</MudButton>
            </MudPaper>
        }
        <!-- Template List -->
        @foreach (var template in Templates) {
            <TemplateDisplay PatientTemplate=@template Templates=@Templates TemplateChanged=@OnTemplatesChanged GroupTemplates="@GroupTemplates"/>
        }   
    </MudStack>
</MudContainer>
    


@code {
    [Inject] PatientService patientService { get; set; }
    [Inject] TemplateService templateService { get; set; }
    private TaskGroupsTemplate[] _patientTemplates;
    private TasksTemplate[] _taskTemplates;

    private TemplateItem[] Templates {get; set;}
    private TaskGroup[] GroupTemplates { get; set; }

    int activeTemplateId = -1;
    bool newTemplateOpen = false;
    string newTemplateLabel = string.Empty;

    protected override async Task OnInitializedAsync(){
        GetTemplates();
        GetGroupTemplates();
    }

    private async Task GetTemplates(){
        var result = await templateService.GetAllTemplates();
        var templates = new List<TemplateItem>();

        result.ForEach(r => {
            var template = new TemplateItem {
                    Label = r.Label,
                    Id = r.Id,
                    Groups = new List<TaskGroup>()
                };

            var groups = new List<TaskGroup>();
            r.Groups.ForEach(g => {
                var group = new TaskGroup(g.Label, new List<TaskItem>(), g.Id);
                g.Tasks.ForEach(t => group.Tasks.Add(new TaskItem { Label = t.Label, Type = t.Type }));
                groups.Add(group);
            });
            template.Groups = groups;
            templates.Add(template);
        });

        Templates = templates.ToArray();
    }

    private async Task GetGroupTemplates(){
        var result = await templateService.GetAllGroupTemplates();
        var groups= new List<TaskGroup>();

        result.ForEach(r => {
            var group = new TaskGroup(r.Label, r.Tasks, r.Id);
            groups.Add(group);
        });

        GroupTemplates = groups.ToArray();
    }

    async Task AddTemplate(){
        var template = new TemplateItem { Label = newTemplateLabel, EditableGroupIndex = -1, Groups = new(), Id = Templates.Length };
        await templateService.AddTemplate(template);

        newTemplateOpen = false;
        newTemplateLabel = string.Empty;

        GetTemplates();
        StateHasChanged();
    }

    async Task OnTemplatesChanged(TemplateItem template){
        if (template.Status == TemplateStatus.Delete) await templateService.RemoveTemplate(template.Id);
        else await templateService.UpdateTemplate(template);
        GetTemplates();
        StateHasChanged();

    }
}
