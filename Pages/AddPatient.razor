@page "/newpatient"

<h3>Add Patient</h3>
<MudGrid>
        <MudItem xs="12" sm="7" >
        <!-- Patient Info -->
        <MudPaper Class="pa-4 ma-2">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
                <MudTextField @bind-Value="id" Label="Patient ID" Required="true" RequiredError="Patient ID is required!" />
                <MudTextField @bind-Value="lastName" Label="Last Name" Required="true" RequiredError="Last Name is required!" />
                <MudTextField @bind-Value="firstName" Label="First Name" />
                <MudDatePicker @bind-PickerMonth="date" Label="Start Date" @bind-Date="date" />
            </MudForm>   
        </MudPaper>

        <!-- Template Selection -->
        <MudPaper Class="ma-2 pa-2">
            <MudExpansionPanel DisableBorders="false" Dense="true">
            <TitleContent>
                <div class="d-flex ma-n4"  >
                    <MudButtonGroup Class="ma-1" Variant="Variant.Outlined">
                        <MudText Class="pr-2">Add Template: </MudText>
                        <MudButton OnClick="()=> AddTemplateGroups(_templateName)">@_templateName</MudButton>
                        <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown">
                            <MudMenuItem OnClick="() => SetTemplate()">No Template</MudMenuItem>
                                @foreach (var template in _patientTemplates) {
                                    <MudMenuItem OnClick="() => SetTemplate(template.Label)">@template.Label</MudMenuItem>
                                }
                        </MudMenu>
                            <MudButton OnClick="()=> AddTemplateGroups(_templateName)">Add Template</MudButton>
                    </MudButtonGroup>
                </div>
            </TitleContent>
            <ChildContent>
                    @if(_templateName != ""){
                        var template = Array.Find(_patientTemplates, t => t.Label == _templateName);
                        if (template is not null){
                            @foreach (var group in template.Groups){
                                <TemplateGroupItem Group="@group" />
                            }
                        }
                    }
            </ChildContent>
            </MudExpansionPanel>
        </MudPaper>

        <!-- Groups listing -->
        <MudPaper Class="ma-2">
            <!-- Group Importer -->
            <MudPaper Outlined="true" Class="pa-2">
                <MudToolBar>
                    <MudAutocomplete T="string" Label="New Group Name" @bind-Value="newGroupLabel" CoerceText="true" CoerceValue="true"
                                    ResetValueOnEmptyText="true" SearchFunc="@SearchGroups" />
                    <MudSpacer />
                    <MudButton OnClick=@AddGroup> Add </MudButton>
                </MudToolBar>
            </MudPaper>
            <!-- Group Listing -->
            <MudPaper Class="pa-2">
                @foreach(var group in groups){
                    <MudToolBar Style="@($"background:{Colors.BlueGrey.Darken2};")">
                        <MudText Typo="Typo.h5" >@group.Label</MudText>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" Size="Size.Small" OnClick="(() => IncrementGroup(group))" />
                        <MudIconButton Icon="@Icons.Material.Sharp.KeyboardArrowDown" Size="Size.Small" OnClick="(() => DecrementGroup(group))"  />
                        <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight"
                            ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                            <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Filled.RemoveCircle" OnClick="() => RemoveGroup(group)" >Remove Group</MudButton>
                        </MudMenu>
                    </MudToolBar>
                    @foreach (var task in group.Tasks) {
                        <TaskEditBase Task="@task" GroupChanged="@OnGroupUpdated" Editing="true" />
                    }
                    <MudPaper Outlined="true" Class="ma-1 pa-1">
                        <MudButton FullWidth="true" OnClick="() => AddTask(group)"> Add Task </MudButton>
                    </MudPaper>
                }
            </MudPaper>
        </MudPaper>
        <!-- Submit Buttons-->
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=> Submit())">Submit</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=> Reset())" Class="mx-2">Clear Form</MudButton>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors) {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Inject] private TemplateService _templateService { get; set; }
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private PatientService PatientService { get; set; }

    TemplateItem[] _patientTemplates;
    TaskGroup[] _groupTemplates;

    List<string> _searchPatientTemplates, _searchGroupTemplates;

    string patientTemplateLabel = string.Empty;
    TemplateItem? patientTemplate { get; set; }
    private string _templateName = "No Template";

    private string newGroupLabel = string.Empty;

    bool success { get; set; }
    string[] errors = { };
    MudForm? form;
    string id;
    string lastName, firstName;
    DateTime? date;
    List<TaskGroup> groups = new();

    protected override async Task OnInitializedAsync() {
        var templates = (await _templateService.GetAllTemplates() as List<TemplateItem>);
        if(templates is not null) _patientTemplates = templates.ToArray();
        var groups = await _templateService.GetAllGroupTemplates();
        if (groups is not null) _groupTemplates = groups.ToArray();

        _searchPatientTemplates = new();
        foreach (var template in _patientTemplates){
            _searchPatientTemplates.Add(template.Label);
        }

        _searchGroupTemplates = new();
        foreach(var group in _groupTemplates){
            _searchGroupTemplates.Add(group.Label);
        }
    }


    async Task<IEnumerable<string>> SearchTemplates(string value) {
        if (string.IsNullOrEmpty(value)) return _searchPatientTemplates;

        return _searchPatientTemplates.Where(t => t.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task<IEnumerable<string>> SearchGroups(string value) {
        if (string.IsNullOrEmpty(value)) return _searchGroupTemplates;

        return _searchGroupTemplates.Where(t => t.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task AddPatientTemplate(){
        var result = Array.FindIndex(_patientTemplates, t => t.Label == patientTemplateLabel);
        if (result == -1) return; //can't find the template

        patientTemplateLabel = string.Empty;
        patientTemplate = _patientTemplates[result];
    }

    private async Task AddTemplateGroups(string templateName){
        var template = Array.Find(_patientTemplates, t => t.Label == templateName);
        if (template is null) return;

        foreach(var group in template.Groups) {
            if (!groups.TrueForAll(g => g.Label != group.Label)) continue; //already added
            groups.Add(group);
        }
        _templateName = string.Empty;
    }

    private async Task AddGroup(){
        //is this a custom group or importing a group template?
        if (string.IsNullOrEmpty(newGroupLabel)) return;
        if (!groups.TrueForAll(g => g.Label != newGroupLabel)) return;

        var group = Array.Find(_groupTemplates, g => g.Label == newGroupLabel);
        if (group is null) group = new TaskGroup(newGroupLabel, new(), null);

        groups.Add(group);
        newGroupLabel = string.Empty;
    }

    private async Task IncrementGroup(TaskGroup group){
        int index = groups.IndexOf(group);
        if (index < 1) return;

        groups.Remove(group);
        groups.Insert(index - 1, group);
    }

    private async Task DecrementGroup(TaskGroup group){
        int index = groups.IndexOf(group);
        if (index >= groups.Count() - 1) return;

        groups.Remove(group);
        groups.Insert(index + 1, group);
    }

    private async Task RemoveGroup(TaskGroup group){
        groups.Remove(group);
    }

    private async Task AddTask(TaskGroup group){
        var task = new TaskItem("New Task", (typeof(bool)), group);
        group.Tasks.Add(task);
    }

    private async Task Submit(){
        if (!success) return;

        Patient patient = new Patient(id, firstName is null ? string.Empty : firstName, lastName, new());
        patient.Id = id;
        patient.LastName = lastName;
        if (firstName is null) patient.FirstName = string.Empty; else patient.FirstName = firstName;
        patient.StartDate = date;

        //task groups and tasks
        foreach(var group in groups){
            var patientGroup = new PatientTaskGroup (group.Label, new());
            patientGroup.Parent = patient;

            foreach(var task in group.Tasks){
                if (task.Type == typeof(bool)) patientGroup.Tasks.Add(new PatientTaskBool {Label = task.Label, Parent = patientGroup });
                if (task.Type == typeof(string)) patientGroup.Tasks.Add(new PatientTaskText { Label = task.Label, Parent = patientGroup });
                if (task.Type == typeof(DateTime)) patientGroup.Tasks.Add(new PatientTaskDate { Label = task.Label, Parent = patientGroup });
                if (task.Type == typeof(List<string>)) patientGroup.Tasks.Add(new PatientTaskList { 
                    Label = task.Label, Options = new List<string> { "option 1", "option2", "option3" }, SelectedOption = 0, Parent = patientGroup });
                if (task.Type == typeof(double)) patientGroup.Tasks.Add(new PatientTaskNumber { Label = task.Label, Parent = patientGroup });
                if (task.Type == typeof(PatientTaskCalculation)) patientGroup.Tasks.Add(new PatientTaskCalculation { Label = task.Label, Parent = patientGroup });
            }
            patient.TaskGroups.Add(patientGroup);
        }
        PatientService.AddPatient(patient);
        NavigationManager.NavigateTo("patients");
    }

    private async Task Reset(){
        groups.Clear();
        form.ResetAsync();

    }

    private async Task SetTemplate(string templateName = ""){
        if (templateName == "") _templateName = "No Template";
        else _templateName = templateName;
    }

    private async Task OnGroupUpdated(TaskGroup group) {
        int index = groups.FindIndex(g => g.Label == group.Label);
        if(index < 0) return;

        groups[index] = group;
    }

}
