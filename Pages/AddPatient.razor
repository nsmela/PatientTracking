@page "/newpatient"
@inject NavigationManager NavigationManager
@inject PatientService PatientService


<h3>Add Patient</h3>
<MudGrid>
        <MudItem xs="12" sm="7" >
        <!-- Patient Info -->
        <MudPaper Class="pa-4 ma-2">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
                <MudTextField @bind-Value="@id" Label="Patient ID" Required="true" RequiredError="Patient ID is required!" />
                <MudTextField @bind-Value="@lastName" Label="Last Name" Required="true" RequiredError="Last Name is required!" />
                <MudTextField @bind-Value="@firstName" Label="First Name" />
                <MudDatePicker @bind-PickerMonth="date" Label="Start Date" @bind-Date="date" />
            </MudForm>   
        </MudPaper>

        <!-- Template -->
        <MudPaper Class="ma-2 pa-2">
            <MudToolBar>
                <MudAutocomplete T="string" Label="Patient Template" @bind-Value="patientTemplateLabel" CoerceText="true" CoerceValue="true"
                    SearchFunc="@SearchTemplates"/>
                <MudSpacer />
                <MudButton > Add </MudButton>
            </MudToolBar>
        </MudPaper>

        <!-- Template listing -->
        <MudPaper Class="ma-2 pa-2">
            <TemplateDisplay PatientTemplate="@patientTemplate" />
        </MudPaper>
        <!-- Submit Buttons-->
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=> Submit())">Submit</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=> Reset())" Class="mx-2">Clear Form</MudButton>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors) {
                        <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Inject] private TemplateService _templateService { get; set; }
    TemplateItem[] _patientTemplates;
    TaskGroup[] _groupTemplates;

    List<string> _searchPatientTemplates, _searchGroupTemplates;

    string patientTemplateLabel = string.Empty;
    TemplateItem? patientTemplate { get; set; }


    bool success { get; set; }
    string[] errors = { };
    MudForm? form;
    string id;
    string lastName, firstName;
    DateTime? date;
    List<TaskGroup> groups = new();

    protected override async Task OnInitializedAsync() {
        var templates = (await _templateService.GetAllTemplates() as List<TemplateItem>);
        if(templates is not null) _patientTemplates = templates.ToArray();
        var groups = await _templateService.GetAllGroupTemplates();
        if (groups is not null) _groupTemplates = groups.ToArray();

        _searchPatientTemplates = new();
        foreach (var template in _patientTemplates){
            _searchPatientTemplates.Add(template.Label);
        }

        _searchGroupTemplates = new();
        foreach(var group in _groupTemplates){
            _searchGroupTemplates.Add(group.Label);
        }
    }


    async Task<IEnumerable<string>> SearchTemplates(string value) {
        if (string.IsNullOrEmpty(value)) return _searchPatientTemplates;

        return _searchPatientTemplates.Where(t => t.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    async Task<IEnumerable<string>> SearchGroups(string value) {
        if (string.IsNullOrEmpty(value)) return _searchGroupTemplates;

        return _searchGroupTemplates.Where(t => t.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task AddPatientTemplate(){
        var result = Array.FindIndex(_patientTemplates, t => t.Label == patientTemplateLabel);
        if (result == -1) return; //can't find the template

        patientTemplateLabel = string.Empty;
        patientTemplate = _patientTemplates[result];
    }

    private async Task AddGroup(){
    }

    private async Task AddTask(TaskGroup group){
    }

    private async Task Submit(){
        if (!success) return;

        Patient patient = new Patient();
        patient.Id = id;
        patient.LastName = lastName;
        if (firstName is null) patient.FirstName = string.Empty; else patient.FirstName = firstName;
        patient.StartDate = date;

        //task groups and tasks
        foreach(var group in groups){
            var patientGroup = new PatientTaskGroup { Label = group.Label, Tasks = new() };
            foreach(var task in group.Tasks){
                if (task.Type == "Checkbox") patientGroup.Tasks.Add(new PatientTaskBool {Label = task.Label });
                if (task.Type == "Text") patientGroup.Tasks.Add(new PatientTaskText{ Label = task.Label });
            }
            patient.TaskGroups.Add(patientGroup);

        }
        PatientService.AddPatient(patient);
        NavigationManager.NavigateTo("patients");
    }

    private async Task Reset(){
        groups.Clear();
        form.ResetAsync();

    }
}
